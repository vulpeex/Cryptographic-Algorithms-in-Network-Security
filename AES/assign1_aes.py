# -*- coding: utf-8 -*-
"""Assign1_AES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HM9fvtBDGS9vdeSVzbTWzBqnVFgOtxov
"""

"""
ELL895
Assignment 01
AES Image Encryption and Decryption
Eepsita - 2021EE10692
-----------------------------------
This program demonstrates AES encryption and decryption using an image as plaintext.
It implements AES-128 in CBC (Cipher Block Chaining) mode.

- Encrypts an image file using AES-128 with cipher block chaining mode
- Displays the encrypted image (ciphertext)
- Decrypts the ciphertext back to the original image
- Displays the decrypted image

"""

import numpy as np
import secrets
from PIL import Image


class AES:
    """Implementation of AES-128 encryption/decryption algorithm"""

    # S-box for SubBytes transformation
    S_BOX = np.array([
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
    ], dtype=np.uint8)

    # Inverse S-box for InvSubBytes transformation
    INV_S_BOX = np.array([
        [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
        [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
        [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
        [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
        [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
        [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
        [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
        [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
        [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
        [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
        [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
        [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
        [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
        [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
        [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
        [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
    ], dtype=np.uint8)

    # Round constants for key expansion
    RCON = np.array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36], dtype=np.uint8)

    @staticmethod
    def create_state_matrix(data):
        """Convert a 16-byte array to a 4x4 state matrix (column-major)"""
        return np.array([list(data[i:i+4]) for i in range(0, len(data), 4)], dtype=np.uint8).transpose()

    @staticmethod
    def state_matrix_to_bytes(state):
        """Convert a 4x4 state matrix to a 16-byte array (column-major)"""
        return bytes(state.transpose().flatten())

    @staticmethod
    def sub_bytes(state):
        """SubBytes transformation: Replace each byte using the S-box"""
        sbox = AES.S_BOX.flatten()
        indices = state.flatten()
        return sbox[indices].reshape(state.shape)

    @staticmethod
    def inv_sub_bytes(state):
        """InvSubBytes transformation: Replace each byte using the inverse S-box"""
        inv_sbox = AES.INV_S_BOX.flatten()
        indices = state.flatten()
        return inv_sbox[indices].reshape(state.shape)

    @staticmethod
    def shift_rows(state):
        """ShiftRows transformation: Cyclically shift rows of the state"""
        state_new = np.zeros_like(state)
        for i in range(4):
            state_new[i] = np.roll(state[i], -i)
        return state_new

    @staticmethod
    def inv_shift_rows(state):
        """InvShiftRows transformation: Inverse of ShiftRows"""
        state_new = np.zeros_like(state)
        for i in range(4):
            state_new[i] = np.roll(state[i], i)
        return state_new

    @staticmethod
    def mix_columns(state):
        """MixColumns transformation: Linear transformation of state columns"""
        def mul2(a):
            """Multiply by 2 in GF(2^8)"""
            return (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

        def mix_single_column(col):
            """Mix a single column"""
            t = col[0] ^ col[1] ^ col[2] ^ col[3]
            u = col[0]
            col[0] ^= t ^ mul2(col[0] ^ col[1])
            col[1] ^= t ^ mul2(col[1] ^ col[2])
            col[2] ^= t ^ mul2(col[2] ^ col[3])
            col[3] ^= t ^ mul2(col[3] ^ u)
            return col

        state_new = state.copy()
        for i in range(4):
            state_new[:, i] = mix_single_column(state_new[:, i].copy())
        return state_new

    @staticmethod
    def inv_mix_columns(state):
        """InvMixColumns transformation: Inverse of MixColumns"""
        def mul(a, b):
            """Multiply two numbers in GF(2^8)"""
            result = 0
            for _ in range(8):
                if b & 1:
                    result ^= a
                high_bit_set = a & 0x80
                a <<= 1
                if high_bit_set:
                    a ^= 0x1b  # Reduction polynomial x^8 + x^4 + x^3 + x + 1
                b >>= 1
            return result

        # Inverse MixColumns matrix
        inv_mix = np.array([
            [0x0e, 0x0b, 0x0d, 0x09],
            [0x09, 0x0e, 0x0b, 0x0d],
            [0x0d, 0x09, 0x0e, 0x0b],
            [0x0b, 0x0d, 0x09, 0x0e]
        ], dtype=np.uint8)

        state_new = np.zeros_like(state)
        for i in range(4):
            for j in range(4):
                sum_val = 0
                for k in range(4):
                    sum_val ^= mul(inv_mix[i][k], state[k][j])
                state_new[i][j] = sum_val
        return state_new

    @staticmethod
    def add_round_key(state, round_key):
        """AddRoundKey transformation: XOR state with round key"""
        return state ^ round_key

    @staticmethod
    def key_expansion(key):
        """Expand the 16-byte key into 11 round keys"""
        # Initialize the first 4 words with the key
        key_matrix = AES.create_state_matrix(key)
        round_keys = [key_matrix]

        # Generate the remaining words
        for i in range(10):
            prev_key = round_keys[i]

            # Rotate the last column, substitute bytes, and XOR with round constant
            temp = np.roll(prev_key[:, 3], -1)
            temp = AES.sub_bytes(temp.reshape(-1, 1)).flatten()
            temp[0] ^= AES.RCON[i]

            # Generate the new round key
            new_key = np.zeros_like(prev_key)
            new_key[:, 0] = prev_key[:, 0] ^ temp

            for j in range(1, 4):
                new_key[:, j] = prev_key[:, j] ^ new_key[:, j-1]

            round_keys.append(new_key)

        return round_keys

    @staticmethod
    def encrypt_block(plaintext, key):
        """Encrypt a single 16-byte block using AES-128"""
        state = AES.create_state_matrix(plaintext)
        round_keys = AES.key_expansion(key)

        # Initial round
        state = AES.add_round_key(state, round_keys[0])

        # Main rounds
        for i in range(1, 10):
            state = AES.sub_bytes(state)
            state = AES.shift_rows(state)
            state = AES.mix_columns(state)
            state = AES.add_round_key(state, round_keys[i])

        # Final round (no MixColumns)
        state = AES.sub_bytes(state)
        state = AES.shift_rows(state)
        state = AES.add_round_key(state, round_keys[10])

        return AES.state_matrix_to_bytes(state)

    @staticmethod
    def decrypt_block(ciphertext, key):
        """Decrypt a single 16-byte block using AES-128"""
        state = AES.create_state_matrix(ciphertext)
        round_keys = AES.key_expansion(key)

        # Initial round
        state = AES.add_round_key(state, round_keys[10])
        state = AES.inv_shift_rows(state)
        state = AES.inv_sub_bytes(state)

        # Main rounds
        for i in range(9, 0, -1):
            state = AES.add_round_key(state, round_keys[i])
            state = AES.inv_mix_columns(state)
            state = AES.inv_shift_rows(state)
            state = AES.inv_sub_bytes(state)

        # Final round
        state = AES.add_round_key(state, round_keys[0])

        return AES.state_matrix_to_bytes(state)

    @staticmethod
    def pad(data, block_size=16):
        """PKCS#7 padding: Add padding bytes to make data a multiple of block_size"""
        padding_len = block_size - (len(data) % block_size)
        padding = bytes([padding_len] * padding_len)
        return data + padding

    @staticmethod
    def unpad(data):
        """Remove PKCS#7 padding"""
        padding_len = data[-1]
        if padding_len == 0 or padding_len > 16:
            raise ValueError("Invalid padding")

        # Verify padding
        for i in range(1, padding_len + 1):
            if data[-i] != padding_len:
                raise ValueError("Invalid padding")

        return data[:-padding_len]

    @staticmethod
    def xor_bytes(a, b):
        """XOR two byte sequences"""
        return bytes(x ^ y for x, y in zip(a, b))

    @staticmethod
    def encrypt_cbc(plaintext, key, iv):
        """Encrypt data using AES-128 with block chaining"""
        plaintext = AES.pad(plaintext)
        blocks = [plaintext[i:i+16] for i in range(0, len(plaintext), 16)]

        ciphertext = bytearray()
        prev_block = iv

        for block in blocks:
            # XOR with previous ciphertext block (or IV for first block)
            block = AES.xor_bytes(block, prev_block)

            # Encrypt the block
            encrypted_block = AES.encrypt_block(block, key)
            ciphertext.extend(encrypted_block)

            # Update previous block
            prev_block = encrypted_block

        return bytes(ciphertext)

    @staticmethod
    def decrypt_cbc(ciphertext, key, iv):
        """Decrypt data using AES-128 with block chaining"""
        blocks = [ciphertext[i:i+16] for i in range(0, len(ciphertext), 16)]

        plaintext = bytearray()
        prev_block = iv

        for block in blocks:
            # Decrypt the block
            decrypted_block = AES.decrypt_block(block, key)

            # XOR with previous ciphertext block (or IV for first block)
            decrypted_block = AES.xor_bytes(decrypted_block, prev_block)
            plaintext.extend(decrypted_block)

            # Update previous block
            prev_block = block

        # Remove padding
        return AES.unpad(plaintext)


def main():
    """Main function to demonstrate AES image encryption/decryption"""
    try:
        # Load the image
        image_path = "test03.jpg"
        print(f"Loading image from {image_path}...")
        image = Image.open(image_path)
        image_bytes = image.tobytes()

        # Generate random key and IV
        print("Generating random key and IV...")
        key = secrets.token_bytes(16)  # 128-bit key
        iv = secrets.token_bytes(16)   # 128-bit IV

        # Encrypt the image
        print("Encrypting image...")
        encrypted_bytes = AES.encrypt_cbc(image_bytes, key, iv)

        # Save the encrypted image
        encrypted_image = Image.frombytes(image.mode, image.size, encrypted_bytes)
        encrypted_image_path = "encrypted_image.jpg"
        encrypted_image.save(encrypted_image_path)
        print(f"Encrypted image saved to {encrypted_image_path}")

        # Decrypt the image
        print("Decrypting image...")
        decrypted_bytes = AES.decrypt_cbc(encrypted_bytes, key, iv)

        # Save the decrypted image
        decrypted_image = Image.frombytes(image.mode, image.size, decrypted_bytes)
        decrypted_image_path = "decrypted_image.jpg"
        decrypted_image.save(decrypted_image_path)
        print(f"Decrypted image saved to {decrypted_image_path}")

        print("Done!")

    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()